services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kpi_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src  
      - ./frontend/public:/app/public 
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
      - FAST_REFRESH=true
      - WATCHPACK_POLLING=true
    stdin_open: true
    tty: true
    command: npm run dev 
    depends_on:
      - web
    networks:
      - app-network

  web:
    build: .
    container_name: kpi_backend
    hostname: web
    command: >
      sh -c "python manage.py makemigrations && 
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DB_HOST=db  
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    networks:
      - app-network

  db:
    image: postgres:15
    container_name: postgres_db  
    hostname: db  
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:8
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app-network
  
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

volumes:
  postgres_data:
  pgadmin_data:
  redis_data:

networks:
  app-network:
    driver: bridge